from transwarp.orm import Model,StringField,IntegerField

#Model从dict继承，所以具备所有dict的功能，同时又实现了特殊方法__getattr__()和__setattr__()
class Model(dict):
  __metaclass__ = ModelMetaclass

  def __init__(self,**kw):
    super(Model,self).__init__(**kw)

  def __getattr__(self,key):
    try:
      return self[key]
    except KeyError:
      raise AttributeError[r"'Dict' object has bo attribute '%s'" % key]

  def __setattr__(self,key,value):
    self[key] = value

  @classmethod
  def get(cls,pk):
    d = db.select_one('select * from %s where %s=?' % (cls.__table,cls.__primary_key__.name,pk)
    return cls(**d) if d else None

#往Model类添加实例方法，就可以让所有子类调用实例方法
  def insert(self):
    params = {}
    for k,v in self.__mappings__.iteritems():
      params[v.name] = getattr(self,k)
    db.insert(self.__table__,**params)
    return self








#将具体的子类的映射信息读取出来ModekMetaclass

class ModelMetaclass(type):
  def __new__(cls,name,bases,attrs):
    mapping = ... #读取cls的Field字段
    primary_key = ...# 查找primary_key字段
    __table__ = cls.__table__ # 读取cls的__table__字段
    #给cls增加一些字段
    attrs['__mapping__'] = mapping
    attrs['__primary_key__'] = __primary_key__
    attrs['__table__'] = __table__
    return type.__new__(cls,name,bases,attrs)

  def find_first():
    pass
  
  def find_all():
    pass

  def find_by():
    pass

  def count_all():
    pass
 
  def count_by():
    pass

  def update():
    pass
  def delete():
    pass















class User(Model):
  __table__ = 'users'
  id = IntegerField(prinmary_key=True)
  name StringField()

#创建实例
user = User(id=123,name='Michael')
#存入数据库
user.insert()



